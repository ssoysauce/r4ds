print(p)
p <- p +
geom_vline(xintercept = 31, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 59, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 90, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 120, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 151, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 181, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 212, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 243, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 273, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 304, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 334, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 365, colour = "wheat4", linetype=3, size=.5)
print(p)
p <- p +
coord_cartesian(ylim = c(-20,100)) +
scale_y_continuous(breaks = seq(-20,100, by=10), labels = a) +
scale_x_continuous(expand = c(0, 0),
breaks = c(15,45,75,105,135,165,195,228,258,288,320,350),
labels = c("January", "February", "March", "April",
"May", "June", "July", "August", "September",
"October", "November", "December"))
p <- p +
coord_cartesian(ylim = c(-20,100)) +
scale_y_continuous(breaks = seq(-20,100, by=10), labels = a) +
scale_x_continuous(expand = c(0, 0),
breaks = c(15,45,75,105,135,165,195,228,258,288,320,350),
labels = c("January", "February", "March", "April",
"May", "June", "July", "August", "September",
"October", "November", "December"))
p <- p +
coord_cartesian(ylim = c(-20,100)) +
scale_y_continuous(breaks = seq(-20,100, by=10)) +
scale_x_continuous(expand = c(0, 0),
breaks = c(15,45,75,105,135,165,195,228,258,288,320,350),
labels = c("January", "February", "March", "April",
"May", "June", "July", "August", "September",
"October", "November", "December"))
print(p)
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=temp), colour="firebrick3")
print(p)
p <- p +
geom_point(data=PresentLows, aes(x=Philadelphia.newDay, y=temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=Philadelphia.newDay, y=temp), colour="firebrick3")
print(p)
> PresentLows <- Philadelphia %>%
# create dataframe that identifies the days in 2014 in which the temps were higher than all previous 19 years
PresentHighs <- Philadelphia %>%
mutate(record = ifelse(high_f>record_high_f, "Y", "N")) %>% # identifies if current year was record high
filter(record == "Y")  # filter for days that represent current year record highs
PresentLows <- Philadelphia %>%
mutate(record = ifelse(low_f<record_low_f, "Y", "N")) %>% # identifies if current year was record low
filter(record == "Y")  # filter for days that represent current year record lows
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=Temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=Temp), colour="firebrick3")
print(p)
PresentLows
View(PresentLows)
View(PresentHighs)
PresentLows <- Philadelphia %>%
mutate(record = ifelse(low_f<record_low_f, "Y", "N")) %>% # identifies if current year was record low
filter(record == "Y")  # filter for days that represent current year record lows
PresentHighs <- Philadelphia %>%
mutate(record = ifelse(high_f>record_high_f, "Y", "N")) %>% # identifies if current year was record high
filter(record == "Y")  # filter for days that represent current year record highs
View(PresentLows)
View(PresentHighs)
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=Temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=Temp), colour="firebrick3")
print(p)
library(tidyverse)
print(p)
p <- ggplot(Past, aes(newDay, average_high_f)) +
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()) +
geom_linerange(Past, mapping=aes(x=newDay, ymin=record_low_f, ymax=record_high_f),alpha=.5 , color = "wheat2")
p <- p +
geom_linerange(Past, mapping=aes(x=newDay, ymin=average_low_f, ymax=average_high_f), colour = "wheat4")
p <- p +
geom_line(Philadelphia, mapping=aes(x=newDay, y=temp, group=1)) +
geom_vline(xintercept = 0, colour = "wheat4", linetype=1, size=1)
p <- p +
geom_line(Philadelphia, mapping=aes(x=newDay, y=temp, group=1)) +
geom_vline(xintercept = 0, colour = "wheat4", linetype=1, linewidth=1)
p <- p +
geom_hline(yintercept = -20, colour = "white", linetype=1) +
geom_hline(yintercept = -10, colour = "white", linetype=1) +
geom_hline(yintercept = 0, colour = "white", linetype=1) +
geom_hline(yintercept = 10, colour = "white", linetype=1) +
geom_hline(yintercept = 20, colour = "white", linetype=1) +
geom_hline(yintercept = 30, colour = "white", linetype=1) +
geom_hline(yintercept = 40, colour = "white", linetype=1) +
geom_hline(yintercept = 50, colour = "white", linetype=1) +
geom_hline(yintercept = 60, colour = "white", linetype=1) +
geom_hline(yintercept = 70, colour = "white", linetype=1) +
geom_hline(yintercept = 80, colour = "white", linetype=1) +
geom_hline(yintercept = 90, colour = "white", linetype=1) +
geom_hline(yintercept = 100, colour = "white", linetype=1)
p <- p +
geom_vline(xintercept = 31, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 59, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 90, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 120, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 151, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 181, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 212, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 243, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 273, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 304, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 334, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 365, colour = "wheat4", linetype=3, size=.5)
p <- p +
coord_cartesian(ylim = c(-20,100)) +
scale_y_continuous(breaks = seq(-20,100, by=10)) +
scale_x_continuous(expand = c(0, 0),
breaks = c(15,45,75,105,135,165,195,228,258,288,320,350),
labels = c("January", "February", "March", "April",
"May", "June", "July", "August", "September",
"October", "November", "December"))
print(p)
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=temp), colour="firebrick3")
print(p)
View(PresentHighs)
View(PresentLows)
PresentLows <- Philadelphia %>%
mutate(record = ifelse(low_f<=record_low_f, "Y", "N")) %>% # identifies if current year was record low
filter(record == "Y")  # filter for days that represent current year record lows
PresentHighs <- Philadelphia %>%
mutate(record = ifelse(high_f>=record_high_f, "Y", "N")) %>% # identifies if current year was record high
filter(record == "Y")  # filter for days that represent current year record highs
print(p)
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=Temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=Temp), colour="firebrick3")
print(p)
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=temp), colour="firebrick3")
print(p)
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=temp), colour="firebrick3")
print(p)
p <- ggplot(Past, aes(newDay, average_high_f)) +
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()) +
geom_linerange(Past, mapping=aes(x=newDay, ymin=record_low_f, ymax=record_high_f),alpha=.5 , color = "wheat2")
p <- p +
geom_linerange(Past, mapping=aes(x=newDay, ymin=average_low_f, ymax=average_high_f), colour = "wheat4")
p <- p +
geom_line(Philadelphia, mapping=aes(x=newDay, y=temp, group=1)) +
geom_vline(xintercept = 0, colour = "wheat4", linetype=1, linewidth=1)
p <- p +
geom_hline(yintercept = -20, colour = "white", linetype=1) +
geom_hline(yintercept = -10, colour = "white", linetype=1) +
geom_hline(yintercept = 0, colour = "white", linetype=1) +
geom_hline(yintercept = 10, colour = "white", linetype=1) +
geom_hline(yintercept = 20, colour = "white", linetype=1) +
geom_hline(yintercept = 30, colour = "white", linetype=1) +
geom_hline(yintercept = 40, colour = "white", linetype=1) +
geom_hline(yintercept = 50, colour = "white", linetype=1) +
geom_hline(yintercept = 60, colour = "white", linetype=1) +
geom_hline(yintercept = 70, colour = "white", linetype=1) +
geom_hline(yintercept = 80, colour = "white", linetype=1) +
geom_hline(yintercept = 90, colour = "white", linetype=1) +
geom_hline(yintercept = 100, colour = "white", linetype=1)
p <- p +
geom_vline(xintercept = 31, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 59, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 90, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 120, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 151, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 181, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 212, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 243, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 273, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 304, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 334, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 365, colour = "wheat4", linetype=3, size=.5)
p <- p +
coord_cartesian(ylim = c(-20,100)) +
scale_y_continuous(breaks = seq(-20,100, by=10)) +
scale_x_continuous(expand = c(0, 0),
breaks = c(15,45,75,105,135,165,195,228,258,288,320,350),
labels = c("January", "February", "March", "April",
"May", "June", "July", "August", "September",
"October", "November", "December"))
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=temp), colour="firebrick3")
print(p)
p <- p +
ggtitle("Philadelphia's Weather in 2022") +
theme(plot.title=element_text(face="bold",hjust=.012,vjust=.8,colour="#3C3C3C",size=20)) +
annotate("text", x = 19, y = 98, label = "Temperature", size=4, fontface="bold")
p <- p +
annotate("segment", x = 302, xend = 307, y = 74, yend = 82, colour = "firebrick3") +
annotate("text", x = 333, y = 82, label = "We had 5 days that were the", size=3, colour="firebrick3") +
annotate("text", x = 324, y = 78, label = "hottest since 1995", size=3, colour="firebrick3")
print(p)
p <- p +
annotate("segment", x = 181, xend = 181, y = 5, yend = 25, colour = "wheat2", size=3) +
annotate("segment", x = 181, xend = 181, y = 12, yend = 18, colour = "wheat4", size=3) +
geom_line(data=legend_data, aes(x=x,y=y)) +
annotate("segment", x = 183, xend = 185, y = 17.7, yend = 17.7, colour = "wheat4", size=.5) +
annotate("segment", x = 183, xend = 185, y = 12.2, yend = 12.2, colour = "wheat4", size=.5) +
annotate("segment", x = 185, xend = 185, y = 12.2, yend = 17.7, colour = "wheat4", size=.5) +
annotate("text", x = 196, y = 14.75, label = "NORMAL RANGE", size=2, colour="gray30") +
annotate("text", x = 162, y = 14.75, label = "2022 TEMPERATURE", size=2, colour="gray30") +
annotate("text", x = 193, y = 25, label = "RECORD HIGH", size=2, colour="gray30") +
annotate("text", x = 193, y = 5, label = "RECORD LOW", size=2, colour="gray30")
p <- p +
annotate("segment", x = 181, xend = 181, y = 5, yend = 25, colour = "wheat2", size=3) +
annotate("segment", x = 181, xend = 181, y = 12, yend = 18, colour = "wheat4", size=3) +
annotate("segment", x = 183, xend = 185, y = 17.7, yend = 17.7, colour = "wheat4", size=.5) +
annotate("segment", x = 183, xend = 185, y = 12.2, yend = 12.2, colour = "wheat4", size=.5) +
annotate("segment", x = 185, xend = 185, y = 12.2, yend = 17.7, colour = "wheat4", size=.5) +
annotate("text", x = 196, y = 14.75, label = "NORMAL RANGE", size=2, colour="gray30") +
annotate("text", x = 162, y = 14.75, label = "2022 TEMPERATURE", size=2, colour="gray30") +
annotate("text", x = 193, y = 25, label = "RECORD HIGH", size=2, colour="gray30") +
annotate("text", x = 193, y = 5, label = "RECORD LOW", size=2, colour="gray30")
print(p)
View(Crater_Lake)
geom_point(data=PresentHighs, aes(x=newDay, y=temp), colour="firebrick3")
library(stats)
library(janitor)
Lake <- Crater_Lake |>
clean_names()
Past <- Lake |>
select(month, day, record_high_f, record_low_f, average_high_f, average_low_f)
Past <- Past |>
mutate(newDay = seq(1, length(Day)))  # label days as 1:365 (will represent x-axis)
Past <- Past |>
mutate(newDay = seq(1, length(day)))  # label days as 1:365 (will represent x-axis)
p <- ggplot(Past, aes(newDay, average_high_f)) +
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()) +
geom_linerange(Past, mapping=aes(x=newDay, ymin=record_low_f, ymax=record_high_f),alpha=.5 , color = "wheat2")
PresentLows <- Lake %>%
mutate(record = ifelse(low_f<record_low_f, "Y", "N")) %>% # identifies if current year was record low
filter(record == "Y")  # filter for days that represent current year record lows
PresentHighs <- Philadelphia %>%
mutate(record = ifelse(high_f>record_high_f, "Y", "N")) %>% # identifies if current year was record high
filter(record == "Y")  # filter for days that represent current year record highs
p <- p +
geom_linerange(Past, mapping=aes(x=newDay, ymin=average_low_f, ymax=average_high_f), colour = "wheat4")
source("~/r4ds/temps.R", echo=TRUE)
PresentLows <- Lake %>%
mutate(record = ifelse(low_f<=record_low_f, "Y", "N")) %>% # identifies if current year was record low
filter(record == "Y")  # filter for days that represent current year record lows
PresentHighs <- Lake %>%
mutate(record = ifelse(high_f>=record_high_f, "Y", "N")) %>% # identifies if current year was record high
filter(record == "Y")  # filter for days that represent current year record highs
p <- p +
geom_linerange(Past, mapping=aes(x=newDay, ymin=average_low_f, ymax=average_high_f), colour = "wheat4")
Lake <- Lake |>
mutate(temp = (high_f + low_f) / 2)
print(p)
p <- p +
geom_hline(yintercept = -20, colour = "white", linetype=1) +
geom_hline(yintercept = -10, colour = "white", linetype=1) +
geom_hline(yintercept = 0, colour = "white", linetype=1) +
geom_hline(yintercept = 10, colour = "white", linetype=1) +
geom_hline(yintercept = 20, colour = "white", linetype=1) +
geom_hline(yintercept = 30, colour = "white", linetype=1) +
geom_hline(yintercept = 40, colour = "white", linetype=1) +
geom_hline(yintercept = 50, colour = "white", linetype=1) +
geom_hline(yintercept = 60, colour = "white", linetype=1) +
geom_hline(yintercept = 70, colour = "white", linetype=1) +
geom_hline(yintercept = 80, colour = "white", linetype=1) +
geom_hline(yintercept = 90, colour = "white", linetype=1) +
geom_hline(yintercept = 100, colour = "white", linetype=1)
p <- p +
geom_vline(xintercept = 31, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 59, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 90, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 120, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 151, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 181, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 212, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 243, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 273, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 304, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 334, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 365, colour = "wheat4", linetype=3, size=.5)
p <- p +
coord_cartesian(ylim = c(-20,100)) +
scale_y_continuous(breaks = seq(-20,100, by=10)) +
scale_x_continuous(expand = c(0, 0),
breaks = c(15,45,75,105,135,165,195,228,258,288,320,350),
labels = c("January", "February", "March", "April",
"May", "June", "July", "August", "September",
"October", "November", "December"))
p <- p +
geom_point(data=PresentLows, aes(x=newDay, y=temp), colour="blue3") +
geom_point(data=PresentHighs, aes(x=newDay, y=temp), colour="firebrick3")
p <- p +
ggtitle("Philadelphia's Weather in 2022") +
theme(plot.title=element_text(face="bold",hjust=.012,vjust=.8,colour="#3C3C3C",size=20)) +
annotate("text", x = 19, y = 98, label = "Temperature", size=4, fontface="bold")
p <- p +
annotate("segment", x = 302, xend = 307, y = 74, yend = 82, colour = "firebrick3") +
annotate("text", x = 333, y = 82, label = "We had 5 days that were the", size=3, colour="firebrick3") +
annotate("text", x = 324, y = 78, label = "hottest since 1995", size=3, colour="firebrick3")
print(p)
p <- p +
annotate("segment", x = 181, xend = 181, y = 5, yend = 25, colour = "wheat2", size=3) +
annotate("segment", x = 181, xend = 181, y = 12, yend = 18, colour = "wheat4", size=3) +
annotate("segment", x = 183, xend = 185, y = 17.7, yend = 17.7, colour = "wheat4", size=.5) +
annotate("segment", x = 183, xend = 185, y = 12.2, yend = 12.2, colour = "wheat4", size=.5) +
annotate("segment", x = 185, xend = 185, y = 12.2, yend = 17.7, colour = "wheat4", size=.5) +
annotate("text", x = 196, y = 14.75, label = "NORMAL RANGE", size=2, colour="gray30") +
annotate("text", x = 162, y = 14.75, label = "2022 TEMPERATURE", size=2, colour="gray30") +
annotate("text", x = 193, y = 25, label = "RECORD HIGH", size=2, colour="gray30") +
annotate("text", x = 193, y = 5, label = "RECORD LOW", size=2, colour="gray30")
print(p)
library(tidyverse)
View(Lake)
Lake <- Lake |>
mutate(newDay = seq(1, length(day)))  # label days as 1:365 (will represent x-axis)
View(Lake)
p <- ggplot(Past, aes(newDay, average_high_f)) +
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()) +
geom_linerange(Past, mapping=aes(x=newDay, ymin=record_low_f, ymax=record_high_f),alpha=.5 , color = "wheat2")
print(p)
View(PresentHighs)
View(PresentLows)
PresentLows <- Lake %>%
mutate(record = ifelse(low_f<=record_low_f, "Y", "N")) %>% # identifies if current year was record low
filter(record == "Y")  # filter for days that represent current year record lows
View(PresentLows)
View(Past)
p <- p +
geom_linerange(Past, mapping=aes(x=newDay, ymin=average_low_f, ymax=average_high_f), colour = "wheat4")
View(Lake)
p <- p +
geom_line(Philadelphia, mapping=aes(x=newDay, y=temp, group=1)) +
geom_vline(xintercept = 0, colour = "wheat4", linetype=1, linewidth=1)
print(p)
p <- ggplot(Past, aes(newDay, average_high_f)) +
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()) +
geom_linerange(Past, mapping=aes(x=newDay, ymin=record_low_f, ymax=record_high_f),alpha=.5 , color = "wheat2")
p <- p +
geom_linerange(Past, mapping=aes(x=newDay, ymin=average_low_f, ymax=average_high_f), colour = "wheat4")
p <- p +
geom_line(Lake, mapping=aes(x=newDay, y=temp, group=1)) +
geom_vline(xintercept = 0, colour = "wheat4", linetype=1, linewidth=1)
print(p)
p <- p +
geom_hline(yintercept = -20, colour = "white", linetype=1) +
geom_hline(yintercept = -10, colour = "white", linetype=1) +
geom_hline(yintercept = 0, colour = "white", linetype=1) +
geom_hline(yintercept = 10, colour = "white", linetype=1) +
geom_hline(yintercept = 20, colour = "white", linetype=1) +
geom_hline(yintercept = 30, colour = "white", linetype=1) +
geom_hline(yintercept = 40, colour = "white", linetype=1) +
geom_hline(yintercept = 50, colour = "white", linetype=1) +
geom_hline(yintercept = 60, colour = "white", linetype=1) +
geom_hline(yintercept = 70, colour = "white", linetype=1) +
geom_hline(yintercept = 80, colour = "white", linetype=1) +
geom_hline(yintercept = 90, colour = "white", linetype=1) +
geom_hline(yintercept = 100, colour = "white", linetype=1)
p <- p +
geom_vline(xintercept = 31, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 59, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 90, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 120, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 151, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 181, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 212, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 243, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 273, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 304, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 334, colour = "wheat4", linetype=3, size=.5) +
geom_vline(xintercept = 365, colour = "wheat4", linetype=3, size=.5)
p <- p +
coord_cartesian(ylim = c(-20,100)) +
scale_y_continuous(breaks = seq(-20,100, by=10)) +
scale_x_continuous(expand = c(0, 0),
breaks = c(15,45,75,105,135,165,195,228,258,288,320,350),
labels = c("January", "February", "March", "April",
"May", "June", "July", "August", "September",
"October", "November", "December"))
print(p)
install.packages("gganimate")
library(gganimate)
install.packages('gifski')
install.packages('av')
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Graph 1: Transitioning through time
gapminder
graph1 = gapminder %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)) +
geom_point(alpha = 0.7, stroke = 0) +
theme_fivethirtyeight() +
scale_size(range=c(2,12), guide="none") +
scale_x_log10() +
labs(title = "Life Expectancy vs GDP Per Capita by Country",
x = "Income per person (GDP / capita)",
y = "Life expectancy (years)",
color = "Continent",
caption = "Source: Gapminder") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")
graph1
graph1.animation = graph1 +
transition_time(year) +
labs(subtitle = "Year: {frame_time}") +
shadow_wake(wake_length = 0.1)
animate(graph1.animation, height = 500, width = 800, fps = 30, duration = 10,
end_pause = 60, res = 100, renderer = gifski_renderer())
# Graph 2: Letting data gradually appear
library(readr)
library(tidyr)
game_sales = read_csv("data/vgsales.csv") %>%
mutate(Year = as.numeric(Year)) %>%
filter(Platform == 'PS3',
Genre %in% c("Action", "Shooter", "Sports", "Racing", "Simulation")) %>%
drop_na() %>%
group_by(Year, Genre) %>%
summarise(Sales = sum(Global_Sales, na.rm = TRUE))
graph2 = game_sales %>%
ggplot(aes(x=Year, y=Sales, color=Genre)) +
geom_line(size = 2, alpha = 0.75) +
theme_solarized_2(light = FALSE) +
labs(title = "PS3 Video Game Sales",
y = "Global Sales ($ Millions USD)") +
theme(text = element_text(family = "DM Sans Medium", colour = "#EEEEEE"),
title = element_text(color = "#EEEEEE"),
axis.title.x = element_blank(),
panel.background = element_rect(fill = NA),
plot.background = element_rect(fill = "#111111"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_blank(),
legend.key = element_blank(),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)) +
scale_color_brewer(palette = "Pastel1") +
geom_point() +
scale_x_continuous(breaks = 0:2100)
graph2.animation = graph2 +
transition_reveal(Year) +
view_follow(fixed_y = TRUE)
animate(graph2.animation, height = 500, width = 800, fps = 30, duration = 10,
end_pause = 60, res = 100, renderer = gifski_renderer())
# Graph 3: Transition between states
reviews = read_csv("googleplaystore.csv") %>%
filter(Category %in% c("GAME", "SOCIAL", "PRODUCTIVITY", "TOOLS", "EDUCATION"))
# Graph 3: Transition between states
reviews = read_csv("data/googleplaystore.csv") %>%
filter(Category %in% c("GAME", "SOCIAL", "PRODUCTIVITY", "TOOLS", "EDUCATION"))
graph3 = reviews %>%
ggplot(aes(x=Category, y=Rating, fill=Category)) +
geom_boxplot() +
theme_fivethirtyeight() +
labs(title = "Google Play Store Ratings",
y = "Rating (out of 5)",
caption = "Source: Kaggle") +
theme(legend.position = "none",
axis.title.y = element_text(),
text = element_text(family="Poppins SemiBold"),
panel.grid.major.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_tableau()
graph3.animation = graph3 +
transition_states(Category, wrap = FALSE) +
shadow_mark(alpha = 0.5) +
enter_grow() +
exit_fade() +
ease_aes('back-out')
animate(graph3.animation, height = 500, width = 800, fps = 30, duration = 10,
end_pause = 60, res = 100, renderer = gifski_renderer())
